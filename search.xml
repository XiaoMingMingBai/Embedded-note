<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>IO 模型</title>
    <url>/2023/04/10/IOModel/</url>
    <content><![CDATA[<p>本文包含4种 <code>IO模型</code> 的介绍、实现原理分层解析、驱动编写思路和代码实现、以及应用层使用方法。</p>
<span id="more"></span>

<h1 id="IO模型的分析"><a href="#IO模型的分析" class="headerlink" title="IO模型的分析"></a>IO模型的分析</h1><p>IO 模型是指应用程序在调用 <code>read</code> 函数的时候，如果数据没有准备好，此时进程会发生什么样的状态转换，以及什么时候会返回。在Linux中有五种IO模型，分别是阻塞IO模型，非阻塞IO模型，IO多路复用IO模型，信号驱动IO模型，异步IO模型。下面是对它的分析<br>以下内容仅为我的个人积累，详细内容请参考官方文档和相关书籍。</p>
<h1 id="阻塞IO模型"><a href="#阻塞IO模型" class="headerlink" title="阻塞IO模型"></a>阻塞IO模型</h1><p>在使用open打开设备文件的时候，如果没有指定 <code>O_NONBLOCK</code>，就说明使用的阻塞方式打开的文件。调用read函数想要从硬件中读取数据的时候，如果数据准备好了 <code>read</code> 就会立即返回，如果调用 <code>read</code> 的时候硬件的数据没有准备好进程休眠。当数据准备好的时候底层硬件会产生中断，内核的中断处理函数就会执行了，在中断处理函数中唤醒休眠的进程，将准备好的数据拷贝到用户空间即可。</p>
<h2 id="阻塞IO模型的代码实现流程"><a href="#阻塞IO模型的代码实现流程" class="headerlink" title="阻塞IO模型的代码实现流程"></a>阻塞IO模型的代码实现流程</h2><h3 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">fd = open(<span class="string">&quot;/dev/mycdev&quot;</span>,O_RDWR);  <span class="comment">//阻塞打开</span></span><br><span class="line">read(fd,buf,<span class="keyword">sizeof</span>(buf));</span><br></pre></td></tr></table></figure>
<h3 id="驱动层"><a href="#驱动层" class="headerlink" title="驱动层"></a>驱动层</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* file_operations: */</span></span><br><span class="line">driver_read(file,ubuf,size,offs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(file-&gt;f_flags &amp; O_NONBLOCK)&#123;</span><br><span class="line">        <span class="comment">//非阻塞</span></span><br><span class="line">        <span class="keyword">return</span> -EINVAL;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//阻塞 （硬件数据是否准备好）</span></span><br><span class="line">        <span class="comment">//如果数据没有准备好此时进程需要休眠</span></span><br><span class="line">        wait_event(wq_head, condition)</span><br><span class="line">        wait_event_interruptible(wq_head, condition)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//读取底层硬件的数据</span></span><br><span class="line">    <span class="comment">//将读取到的数据拷贝到用户空间（copy_to_user）</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 中断处理函数中：*/</span></span><br><span class="line">    condition = <span class="number">1</span>;</span><br><span class="line">    wake_up(&amp;wq_head);</span><br><span class="line">    wake_up_interruptible(&amp;wq_head)</span><br></pre></td></tr></table></figure>


<hr>
<h1 id="IO多路复用IO模型"><a href="#IO多路复用IO模型" class="headerlink" title="IO多路复用IO模型"></a>IO多路复用IO模型</h1><p>在同一个app应用程序中如果想要同时监听多个fd对应数据。就需要使用 <code>select/poll/epoll</code> 来完成监听。如果所有的文件描述符的数据都没有准备好，此时进程休眠。如果有一个或者多个硬件的数据准备好就会产生硬件中断，在处理函数中唤醒休眠的进程。此时 <code>select/poll/epoll</code> 就会返回，从就绪的表中找到准备好数据的文件描述符，然后调用 <code>read</code> 将数据读取到用户空间即可。</p>
<h2 id="IO多路复用IO模型的代码实现流程"><a href="#IO多路复用IO模型的代码实现流程" class="headerlink" title="IO多路复用IO模型的代码实现流程"></a>IO多路复用IO模型的代码实现流程</h2><h3 id="应用层-1"><a href="#应用层-1" class="headerlink" title="应用层"></a>应用层</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> fd1,fd2;</span><br><span class="line">fd_set rfds; <span class="comment">//定义读表</span></span><br><span class="line">fd1 = open(<span class="string">&quot;/dev/mycdev0&quot;</span>,O_RDWR);</span><br><span class="line">fd2 = open(<span class="string">&quot;/dev/input/mouse0&quot;</span>,O_RDWR);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    FD_ZERO(&amp;rfds); <span class="comment">//清空表</span></span><br><span class="line">    FD_SET(fd1,&amp;rfds); <span class="comment">//将fd1放到读表中</span></span><br><span class="line">    FD_SET(fd2,&amp;rfds); <span class="comment">//将fd2放到读表中</span></span><br><span class="line">    select(fd2+<span class="number">1</span>,&amp;rfds,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>); <span class="comment">//监听文件描述符</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(FD_ISSET(fd1,&amp;rfds))&#123;</span><br><span class="line">        read(fd1,buf1,<span class="keyword">sizeof</span>(buf1));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;mycdev:%s\n&quot;</span>,buf1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(FD_ISSET(fd2,&amp;rfds))&#123;</span><br><span class="line">        read(fd2,buf2,<span class="keyword">sizeof</span>(buf2));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;mouse0:%s\n&quot;</span>,buf2);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="驱动层-1"><a href="#驱动层-1" class="headerlink" title="驱动层"></a>驱动层</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* file_operations:(应用层select/poll/epoll对应驱动都是poll函数) */</span></span><br><span class="line"><span class="type">__poll_t</span> (*poll) (<span class="keyword">struct</span> file *file, <span class="keyword">struct</span> poll_table_struct *wait)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 1.定义返回值变量</span></span><br><span class="line">    <span class="type">__poll_t</span> mask=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 2.调用poll_wait完成阻塞</span></span><br><span class="line">    poll_wait(file,&amp;wq_head,wait);</span><br><span class="line">    <span class="comment">// 3.如果数据准备好置位mask</span></span><br><span class="line">    <span class="keyword">if</span>(condition)&#123;</span><br><span class="line">        mask |= EPOLLIN;       <span class="comment">//EPOLLIN 读  EPOLLOUT写</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 4.返回mask</span></span><br><span class="line">    <span class="keyword">return</span> mask;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="IO多路复用IO模型的实现原理"><a href="#IO多路复用IO模型的实现原理" class="headerlink" title="IO多路复用IO模型的实现原理"></a>IO多路复用IO模型的实现原理</h2><h3 id="应用层-2"><a href="#应用层-2" class="headerlink" title="应用层"></a>应用层</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">select(fd2 + <span class="number">1</span>, &amp;rfds, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure>
<h3 id="虚拟文件系统层"><a href="#虚拟文件系统层" class="headerlink" title="虚拟文件系统层"></a>虚拟文件系统层</h3><p>首先使用 <code>vi -t sys_select</code> 命令查看 <code>select</code> 函数的实现</p>
<ol>
<li>对最大文件描述符的值作校验工作</li>
<li>在内核空间分配6张表的内存，其中前3张表用于保存用户传递到内核的文件描述符后三张表用于保存就绪的文件描述符（后三张表此时是空的）</li>
<li>遍历文件描述符<br><code>mask = rfds--&gt;fd--&gt;fd_array[fd]--&gt;file--&gt;f_op--&gt;poll(file,wait);</code><br>判断mask返回的值，如果所有的文件描述对应驱动poll函数返回的值都是0，说明所有文件描述符的数据都没准备好，构造等待队列，进程休眠</li>
<li>如果一个或者多个文件描述符对应的数据准备好了，就会唤醒这个休眠的进程</li>
<li>再次遍历文件描述符<br><code>mask = rfds--&gt;fd--&gt;fd_array[fd]--&gt;file--&gt;f_op--&gt;poll(file,wait);</code><br>找出mask不为0的文件描述符，将这个文件描述符放到就绪的文件描述符表中</li>
<li>将就绪的文件描述表拷贝到用户空间</li>
</ol>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>总的来说 <code>select</code> <code>poll</code> <code>epoll</code> 的实现原理都是一样的，只是在实现的时候有一些细节上的差别。</p>
<h4 id="select-结构体"><a href="#select-结构体" class="headerlink" title="select (结构体)"></a>select (结构体)</h4><ol>
<li>select监听的最大文件描述符限制1024</li>
<li>select的内部实现又清空表的过程，需要反复构造表，从用户空间向内核空间拷贝表，效率低</li>
<li>select从休眠状态被唤醒之后需要再次遍历文件描述符表，效率比较低</li>
</ol>
<h4 id="poll-链表"><a href="#poll-链表" class="headerlink" title="poll (链表)"></a>poll (链表)</h4><ol>
<li>poll监听的文件描述符没有个数限制</li>
<li>poll没有清空表的过程，效率高</li>
<li>poll从休眠状态被唤醒之后需要再次遍历文件描述符表，效率比较低</li>
</ol>
<h4 id="epoll-红黑树-双链表"><a href="#epoll-红黑树-双链表" class="headerlink" title="epoll (红黑树+双链表)"></a>epoll (红黑树+双链表)</h4><ol>
<li>epoll监听的文件描述符没有个数限制</li>
<li>epoll没有清空表的过程，效率高</li>
<li>epoll监听的文件描述符就绪之后它能够直接拿到就绪的文件描述符，不需要遍历，效率高</li>
</ol>
<p><code>epoll_ctl</code> 支持管道，FIFO，套接字，POSIX消息队列，终端，设备等，但是就是不支持普通文件或目录的fd</p>
<hr>
<h1 id="异步通知IO模型"><a href="#异步通知IO模型" class="headerlink" title="异步通知IO模型"></a>异步通知IO模型</h1><p>当底层硬件的数据准备好的时候会产生硬件中断，在驱动的中断处理函数中给对应的进程发送信号，当进程收到信号的时候去读取数据，当没有收到信号的时候进程可以执行任意操作。<br>信号和中断不同，中断是基于硬件实现的，而信号是基于软件实现的是中断的一种模拟，如果没有操作系统那么就没有信号。</p>
<h2 id="异步通知IO模型的代码实现流程"><a href="#异步通知IO模型的代码实现流程" class="headerlink" title="异步通知IO模型的代码实现流程"></a>异步通知IO模型的代码实现流程</h2><h3 id="应用层-3"><a href="#应用层-3" class="headerlink" title="应用层"></a>应用层</h3><p>首先在系统的信号中有一个 <code>29) SIGIO</code> 就是专门留给IO模型使用的，可以在终端通过 <code>kill -l</code> 命令查看</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 信号处理函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">signal_handle</span><span class="params">(<span class="type">int</span> signo)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//从底层读取数据</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1.打开设备文件</span></span><br><span class="line">fd = open(<span class="string">&quot;/dev/mycdev0&quot;</span>,O_RDWR);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.使用signal函数为信号绑定处理函数</span></span><br><span class="line"><span class="comment">//      要明白signal函数并不会调用file_operations中的任何函数，只是为信号绑定了一个处理函数</span></span><br><span class="line">signal(SIGIO,signal_handle);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 3.调用驱动的fasync函数，做初始化工作</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> flags = fcntl(fd,F_GETFL);</span><br><span class="line">fcntl(fd,F_SETFL,flags|FASYNC);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 4.告诉内核接收信号的进程是当前进程</span></span><br><span class="line">fcntl(fd,F_SETOWN,getpid());</span><br></pre></td></tr></table></figure>
<h3 id="虚拟文件系统层-1"><a href="#虚拟文件系统层-1" class="headerlink" title="虚拟文件系统层"></a>虚拟文件系统层</h3><p>首先可以使用 <code>vi -t sys_fcntl</code> 命令查看 <code>fcntl</code> 函数的实现</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 可知首先执行的是</span></span><br><span class="line">SYSCALL_DEFINE3(fcntl, <span class="type">unsigned</span> <span class="type">int</span>, fd, <span class="type">unsigned</span> <span class="type">int</span>, cmd, <span class="type">unsigned</span> <span class="type">long</span>, arg) </span><br><span class="line"><span class="comment">// 经过替换后可以得到</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> <span class="title function_">sys_fcntl</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> fd, <span class="type">unsigned</span> <span class="type">int</span> cmd, <span class="type">unsigned</span> <span class="type">long</span> arg)</span></span><br><span class="line">---&gt;err = do_fcntl(fd, cmd, arg, f.file);</span><br><span class="line"><span class="comment">// 然后知道会调用 do_fcntl 函数</span></span><br><span class="line"><span class="type">static</span> <span class="type">long</span> <span class="title function_">do_fcntl</span><span class="params">(<span class="type">int</span> fd, <span class="type">unsigned</span> <span class="type">int</span> cmd, <span class="type">unsigned</span> <span class="type">long</span> arg,<span class="keyword">struct</span> file *filp)</span></span><br><span class="line">---&gt;<span class="title function_">switch</span> <span class="params">(cmd)</span> &#123;  </span><br><span class="line">    <span class="keyword">case</span> F_GETFL:</span><br><span class="line">        err = filp-&gt;f_flags;   <span class="comment">//open函数的第二个参数，代表文件打开式</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> F_SETFL:</span><br><span class="line">        err = setfl(fd, filp, arg); <span class="comment">//arg = filp-&gt;f_flags|FASYNC</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">setfl</span><span class="params">(<span class="type">int</span> fd, <span class="keyword">struct</span> file * filp, <span class="type">unsigned</span> <span class="type">long</span> arg)</span>  </span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//arg = filp-&gt;f_flags|FASYNC</span></span><br><span class="line">    <span class="keyword">if</span> (((arg ^ filp-&gt;f_flags) &amp; FASYNC) &amp;&amp; filp-&gt;f_op-&gt;fasync) &#123;</span><br><span class="line">        <span class="comment">//调用底层驱动的fasync函数执行</span></span><br><span class="line">        error = filp-&gt;f_op-&gt;fasync(fd, filp, (arg &amp; FASYNC) != <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="驱动层-2"><a href="#驱动层-2" class="headerlink" title="驱动层"></a>驱动层</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* file_operations: */</span></span><br><span class="line"><span class="comment">// 在内核中查看函数的实现，通过注释发现 fasnc_helper 函数是用来初始化异步通知的队列的，因为如果有多个进程都要异步通知，那么就需要一个队列来存储这些进程</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">mycdev_fasync</span><span class="params">(<span class="type">int</span> fd, <span class="keyword">struct</span> file *file, <span class="type">int</span> on)</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//发信号前的初始化工作</span></span><br><span class="line">    <span class="comment">//初始化一个异步通知的队列，你可以通过fapp成员拿到队列</span></span><br><span class="line">    <span class="keyword">return</span>  fasync_helper(fd, file, on, &amp;fapp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送信号：</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">kill_fasync</span><span class="params">(&amp;fapp, SIGIO, POLL_IN)</span>;   <span class="comment">//POLL_IN 发送可读事件   POLL_OUT  发送可写事件</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Git &amp; Github 的使用</title>
    <url>/2021/05/10/git/</url>
    <content><![CDATA[<p>本文包含 <code>Git</code> 和 <code>Github</code> 的介绍和使用方法，对于不了解Git和Github的同志，可以快速入门享受Git和Github的乐趣。   </p>
<span id="more"></span>

<h1 id="Git-Github"><a href="#Git-Github" class="headerlink" title="Git &amp; Github"></a>Git &amp; Github</h1><p>git 和 github 的合作就像是一个人和他的硬盘的关系，git 是一个版本控制系统，它是为了更好地管理和跟踪软件代码的变化而开发的。版本控制系统的主要目标是记录文件的历史变化，允许多人协同开发，并且能够轻松回滚到之前的代码状态。而 github 是一个基于 git 的代码托管平台和开发者社交网络。它提供了一个云端的代码仓库，允许开发者将他们的项目代码存储在云端，并通过 git 进行版本控制。github 允许开发者在云端进行代码管理，方便地与其他开发者协作、共享代码和追踪项目的变化。<br>以下内容仅为我的个人积累，详细内容请参考 <a href="https://git-scm.com/doc">Git 官方文档</a> 和 <a href="https://docs.github.com/en">Github 官方文档</a>。</p>
<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><p>Git是一个版本控制系统，使用它就可以对本地的代码进行版本管理，比如可以回滚到之前的代码状态、以及查看代码的修改历史、设置标签或者分支等等。</p>
<h2 id="Git的基本使用"><a href="#Git的基本使用" class="headerlink" title="Git的基本使用"></a>Git的基本使用</h2><ol>
<li>安装 <strong><a href="https://git-scm.com/downloads">Git</a></strong>  </li>
<li>在本第新建一个文件夹，然后右键选择<code>Git Bash Here</code></li>
<li>配置用户信息<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;Your Name&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;Your Email&quot;</span></span><br></pre></td></tr></table></figure></li>
<li>输入命令初始化仓库  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure></li>
<li>添加文件到暂存区 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add . <span class="comment"># 添加所有文件</span></span><br><span class="line">git add [filename] <span class="comment"># 添加指定文件</span></span><br></pre></td></tr></table></figure></li>
<li>提交更改到仓库 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;提交说明&quot;</span> <span class="comment"># 提交到仓库</span></span><br></pre></td></tr></table></figure></li>
<li>创建分支和合并分支 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch [branchname] <span class="comment"># 创建分支</span></span><br><span class="line">git checkout [branchname] <span class="comment"># 切换分支</span></span><br><span class="line">git merge [branchname] <span class="comment"># 合并分支</span></span><br></pre></td></tr></table></figure></li>
<li>查看分支 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> <span class="comment"># 查看提交日志</span></span><br><span class="line">git status <span class="comment"># 查看状态</span></span><br><span class="line">git diff <span class="comment"># 查看修改内容</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h1><p>GitHub是一个基于Git的代码托管平台和开发者社交网络。使用它可以让我们的代码托管在云端，这样就可以与其他开发者合作开发项目等等。</p>
<h2 id="Github的基本使用"><a href="#Github的基本使用" class="headerlink" title="Github的基本使用"></a>Github的基本使用</h2><ol>
<li>注册 <strong><a href="https://github.com/">Github</a></strong></li>
<li>创建仓库<br>登录GitHub后，点击页面右上角的加号图标，选择 <code>&quot;New Repository&quot;</code> 创建一个新的远程仓库。给仓库取一个名称，并设置仓库的可见性（公开或私有）。</li>
<li>关联本地仓库，在这里有两种关联，一种是 <code>HTTPS</code>，一种是 <code>SSH</code>。  <h4 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h4><ol>
<li>在本地仓库中的<code>Git Bash Here</code>中输入命令  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add origin [YUOR HTTPS URL] <span class="comment"># 关联远程仓库</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h4><ol>
<li>在本地仓库中的<code>Git Bash Here</code>中输入命令  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa <span class="comment"># 用RSA算法生成SSH密钥</span></span><br></pre></td></tr></table></figure></li>
<li>在本地家目录下的 <code>.ssh</code> 文件夹中找到 <code>id_rsa.pub</code> 文件，打开并复制里面的内容 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure></li>
<li>添加到仓库的 <code>SSH Keys</code> 中<br> 登录GitHub后，点击页面右上角的头像，选择 <code>Settings</code>，然后选择 <code>SSH and GPG keys</code>，点击 <code>New SSH key</code>，将复制的内容粘贴到 <code>Key</code> 中，然后点击 <code>Add SSH key</code>。<br> 当然也可以在仓库的 <code>Settings</code> 中选择 <code>Deploy keys</code>，点击 <code>Add deploy key</code>，将复制的内容粘贴到 <code>Key</code> 中，然后点击 <code>Add key</code>。<br> 它们的区别是如果是在 <code>SSH and GPG keys</code> 中添加的话，你可以通过 <code>SSH</code> 访问自己所有仓库，如果是在 <code>Deploy keys</code> 中添加的话，那么只有你添加了密钥的仓库。</li>
<li>在本地仓库中的<code>Git Bash Here</code>中输入命令 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add origin [YUOR SSH URL] <span class="comment"># 关联远程仓库</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li>推送代码到远程仓库 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push -u origin master <span class="comment"># 推送到远程仓库并创建 master 分支，当远程仓库没有 master 分支时使用</span></span><br><span class="line">git push origin master <span class="comment"># 推送到远程仓库的 master 分支</span></span><br></pre></td></tr></table></figure></li>
<li>克隆远程仓库 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> [YUOR HTTPS URL] <span class="comment"># 通过HTTP克隆远程仓库</span></span><br><span class="line">git <span class="built_in">clone</span> [YUOR SSH URL] <span class="comment"># 通过SSH克隆远程仓库</span></span><br></pre></td></tr></table></figure></li>
<li>拉取远程仓库 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git pull origin master <span class="comment"># 将远程仓库的 master 分支合并到本地仓库的 master 分支</span></span><br></pre></td></tr></table></figure></li>
<li>创建 Pull Request<br>如果您想将您的更改合并到项目的主分支中，您可以在GitHub上创建一个Pull Request。在项目页面中，点击”Pull Request”按钮，然后选择”New Pull Request”创建一个新的拉取请求，并进行描述和讨论。</li>
</ol>
<h1 id="git-github-的使用"><a href="#git-github-的使用" class="headerlink" title="git &amp; github 的使用"></a>git &amp; github 的使用</h1><h2 id="Git-基础"><a href="#Git-基础" class="headerlink" title="Git 基础"></a>Git 基础</h2><h3 id="获取-Git-仓库"><a href="#获取-Git-仓库" class="headerlink" title="获取 Git 仓库"></a>获取 Git 仓库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init <span class="comment"># 初始化仓库</span></span><br><span class="line">git add *.c <span class="comment"># 添加所有 .c 文件</span></span><br><span class="line">git add LICENSE <span class="comment"># 添加 LICENSE 文件</span></span><br><span class="line">git commit -m <span class="string">&#x27;initial project version&#x27;</span> <span class="comment"># 提交到仓库 message</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/libgit2/libgit2 <span class="comment"># 克隆远程仓库</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/libgit2/libgit2 mylibgit <span class="comment"># 在当前目录下新建一个文件夹并初始化并克隆远程仓库</span></span><br></pre></td></tr></table></figure>
<h3 id="记录每次更新到仓库"><a href="#记录每次更新到仓库" class="headerlink" title="记录每次更新到仓库"></a>记录每次更新到仓库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git status <span class="comment"># 查看状态</span></span><br><span class="line">git status -s <span class="comment"># 简短输出 short</span></span><br><span class="line">git diff <span class="comment"># 比较工作目录中当前文件和暂存区域快照之间的差异</span></span><br><span class="line">git diff --staged <span class="comment"># 比较暂存区域和最后一次提交的差异</span></span><br><span class="line">git diff --cached <span class="comment"># 查看已经暂存起来的变化（ --staged 和 --cached 是同义词）</span></span><br><span class="line">git commit <span class="comment"># 提交到仓库并打开编辑器输入提交说明</span></span><br><span class="line">git commit -m <span class="string">&#x27;message&#x27;</span> <span class="comment"># 将提交信息和命令放在同一行</span></span><br><span class="line">git commit -a -m <span class="string">&#x27;message&#x27;</span> <span class="comment"># 跳过使用暂存区域，直接将所有已经跟踪过的文件暂存起来一并提交</span></span><br><span class="line">git <span class="built_in">rm</span> PROJECTS.md <span class="comment"># 从暂存区域移除文件</span></span><br><span class="line">git <span class="built_in">rm</span> -f PROJECTS.md <span class="comment"># 强制从暂存区域移除文件 force</span></span><br><span class="line">git <span class="built_in">rm</span> --cached README <span class="comment"># 从暂存区域移除文件但不删除文件</span></span><br><span class="line">git <span class="built_in">rm</span> <span class="built_in">log</span>/\*.<span class="built_in">log</span> <span class="comment"># 删除log/目录下所有.log文件</span></span><br><span class="line">git <span class="built_in">rm</span> \*~ <span class="comment"># 删除所有名字以~结尾的文件</span></span><br><span class="line">git <span class="built_in">mv</span> file_from file_to <span class="comment"># 对文件改名 rm + add</span></span><br></pre></td></tr></table></figure>

<h2 id="Git-分支"><a href="#Git-分支" class="headerlink" title="Git 分支"></a>Git 分支</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch testing <span class="comment"># 创建分支</span></span><br><span class="line">git <span class="built_in">log</span> --oneline --decorate <span class="comment"># 查看各个分支当前所指的对象，由 --decorate 选项可以看到每一个分支的最后一次提交</span></span><br><span class="line">git <span class="built_in">log</span> --oneline --decorate --graph --all <span class="comment"># 输出你的提交历史、各个分支的指向以及项目的分支分叉情况</span></span><br><span class="line">git checkout testing <span class="comment"># 切换分支</span></span><br><span class="line">git checkout -b iss53 <span class="comment"># 创建并切换到 iss53 分支 branch</span></span><br><span class="line">git merge hotfix <span class="comment"># 合并 hotfix 分支到当前分支</span></span><br><span class="line">git branch -d hotfix <span class="comment"># 删除 hotfix 分支 delete</span></span><br><span class="line">git mergetool <span class="comment"># 合并冲突可视化工具</span></span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>sys_select 剖析</title>
    <url>/2022/07/10/sys_select%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<p>本文包含对 <code>sys_select</code> 从内核层面的实现进行剖析</p>
<span id="more"></span>

<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p><code>sys_select</code> 函数是一个系统调用，它的作用是监视一组文件描述符，并在这组文件描述符中的任何一个上发生变化时通知进程。下面对它进行分析<br>以下内容仅为我的个人积累，详细内容请参考官方文档和相关书籍。</p>
<h2 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h2><p>首先在应用层调用接口  </p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">select(fd2 + <span class="number">1</span>, &amp;rfds, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure>

<h2 id="内核"><a href="#内核" class="headerlink" title="内核"></a>内核</h2><p>vi -t sys_select</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">SYSCALL_DEFINE5(select, <span class="type">int</span>, n, fd_set __user *, inp, fd_set __user *, outp,</span><br><span class="line">        fd_set __user *, <span class="built_in">exp</span>, <span class="keyword">struct</span> __kernel_old_timeval __user *, tvp) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> kern_select(n, inp, outp, <span class="built_in">exp</span>, tvp);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">sys_select</span><span class="params">(<span class="type">int</span> n,fd_set __user * inp, fd_set __user * outp,</span></span><br><span class="line"><span class="params">        fd_set __user * <span class="built_in">exp</span>, <span class="keyword">struct</span> __kernel_old_timeval __user * tvp)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">return</span> kern_select(n, inp, outp, <span class="built_in">exp</span>, tvp);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">kern_select</span><span class="params">(<span class="type">int</span> n, fd_set __user *inp, fd_set __user *outp,</span></span><br><span class="line"><span class="params">		       fd_set __user *<span class="built_in">exp</span>, <span class="keyword">struct</span> __kernel_old_timeval __user *tvp)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> ret;</span><br><span class="line">	</span><br><span class="line">	ret = core_sys_select(n, inp, outp, <span class="built_in">exp</span>, to);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> poll_select_finish(&amp;end_time, tvp, PT_TIMEVAL, ret);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">core_sys_select</span><span class="params">(<span class="type">int</span> n, fd_set __user *inp, fd_set __user *outp,</span></span><br><span class="line"><span class="params">			   fd_set __user *<span class="built_in">exp</span>, <span class="keyword">struct</span> timespec64 *end_time)</span></span><br><span class="line">&#123;</span><br><span class="line">	fd_set_bits fds;</span><br><span class="line">	<span class="type">void</span> *bits;</span><br><span class="line">	<span class="type">int</span> ret, max_fds;</span><br><span class="line">	<span class="type">size_t</span> size, alloc_size;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">fdtable</span> *<span class="title">fdt</span>;</span></span><br><span class="line">	<span class="comment">/* Allocate small arguments on the stack to save memory and be faster */</span></span><br><span class="line">	<span class="type">long</span> stack_fds[SELECT_STACK_ALLOC/<span class="keyword">sizeof</span>(<span class="type">long</span>)];</span><br><span class="line"></span><br><span class="line">	ret = -EINVAL;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//1.如果用户写的最大文件描述符的值小于0，直接报错返回</span></span><br><span class="line">	<span class="keyword">if</span> (n &lt; <span class="number">0</span>)</span><br><span class="line">		<span class="keyword">goto</span> out_nofds;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//2.从当前进程中获取最大文件描述符个数和用户传递的n做比较</span></span><br><span class="line">	<span class="comment">//如果用户传递的文件描述符的值不合法，强制更正。</span></span><br><span class="line">	<span class="comment">//current---&gt;task_struct功能?</span></span><br><span class="line">	<span class="comment">//#define current get_current()</span></span><br><span class="line">	<span class="comment">//#define get_current() (current_thread_info()-&gt;task)  获取了当前进程的结构体</span></span><br><span class="line">	fdt = files_fdtable(current-&gt;files);</span><br><span class="line">	max_fds = fdt-&gt;max_fds;</span><br><span class="line">	<span class="keyword">if</span> (n &gt; max_fds)</span><br><span class="line">		n = max_fds;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//3.分配6张表的内存，前3张表存用户的文件描述符集合</span></span><br><span class="line">	<span class="comment">//后3张表存放就绪的文件描述符</span></span><br><span class="line">	alloc_size = <span class="number">6</span> * size;</span><br><span class="line">	bits = kvmalloc(alloc_size, GFP_KERNEL);</span><br><span class="line"></span><br><span class="line">	fds.in      = bits;</span><br><span class="line">	fds.out     = bits +   size;</span><br><span class="line">	fds.ex      = bits + <span class="number">2</span>*size;</span><br><span class="line">	fds.res_in  = bits + <span class="number">3</span>*size;</span><br><span class="line">	fds.res_out = bits + <span class="number">4</span>*size;</span><br><span class="line">	fds.res_ex  = bits + <span class="number">5</span>*size;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//将用户空间表中的数据拷贝到内核空间中</span></span><br><span class="line">	<span class="keyword">if</span> ((ret = get_fd_set(n, inp, fds.in)) ||</span><br><span class="line">	    (ret = get_fd_set(n, outp, fds.out)) ||</span><br><span class="line">	    (ret = get_fd_set(n, <span class="built_in">exp</span>, fds.ex)))</span><br><span class="line">		<span class="keyword">goto</span> out;</span><br><span class="line">	<span class="comment">//将就绪的三张表清零</span></span><br><span class="line">	zero_fd_set(n, fds.res_in);</span><br><span class="line">	zero_fd_set(n, fds.res_out);</span><br><span class="line">	zero_fd_set(n, fds.res_ex);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//4.文件描述符遍历工作</span></span><br><span class="line">	ret = do_select(n, &amp;fds, end_time);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">		<span class="keyword">goto</span> out;</span><br><span class="line">	<span class="keyword">if</span> (!ret) &#123;</span><br><span class="line">		ret = -ERESTARTNOHAND;</span><br><span class="line">		<span class="keyword">if</span> (signal_pending(current))</span><br><span class="line">			<span class="keyword">goto</span> out;</span><br><span class="line">		ret = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//5.将就绪的文件描述符拷贝到用户空间</span></span><br><span class="line">	<span class="keyword">if</span> (set_fd_set(n, inp, fds.res_in) ||</span><br><span class="line">	    set_fd_set(n, outp, fds.res_out) ||</span><br><span class="line">	    set_fd_set(n, <span class="built_in">exp</span>, fds.res_ex))</span><br><span class="line">		ret = -EFAULT;</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">	<span class="keyword">if</span> (bits != stack_fds)</span><br><span class="line">		kvfree(bits);</span><br><span class="line">out_nofds:</span><br><span class="line">	<span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">do_select</span><span class="params">(<span class="type">int</span> n, fd_set_bits *fds, <span class="keyword">struct</span> timespec64 *end_time)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">ktime_t</span> expire, *to = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">poll_wqueues</span> <span class="title">table</span>;</span></span><br><span class="line">	poll_table *wait;</span><br><span class="line">	<span class="type">int</span> retval, i, timed_out = <span class="number">0</span>;</span><br><span class="line">	u64 slack = <span class="number">0</span>;</span><br><span class="line">	<span class="type">__poll_t</span> busy_flag = net_busy_loop_on() ? POLL_BUSY_LOOP : <span class="number">0</span>;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span> busy_start = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//1.对最大的文件描述符的值做校验工作</span></span><br><span class="line">	n = retval;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//2.初始化了一个构造等待队列的函数(这个函数没有被调用)</span></span><br><span class="line">	poll_initwait(&amp;table);</span><br><span class="line">	wait = &amp;table.pt;</span><br><span class="line"></span><br><span class="line">	retval = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (;;) &#123;</span><br><span class="line">		<span class="type">unsigned</span> <span class="type">long</span> *rinp, *routp, *rexp, *inp, *outp, *<span class="built_in">exp</span>;</span><br><span class="line">		<span class="type">bool</span> can_busy_loop = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//分配6个unsigned long的指针用于从6张表中获取第一个unsigned long的整数</span></span><br><span class="line">		inp = fds-&gt;in; outp = fds-&gt;out; <span class="built_in">exp</span> = fds-&gt;ex;</span><br><span class="line">		rinp = fds-&gt;res_in; routp = fds-&gt;res_out; rexp = fds-&gt;res_ex;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++rinp, ++routp, ++rexp) &#123;</span><br><span class="line">			<span class="type">unsigned</span> <span class="type">long</span> in, out, ex, all_bits, bit = <span class="number">1</span>, j;</span><br><span class="line">			<span class="type">unsigned</span> <span class="type">long</span> res_in = <span class="number">0</span>, res_out = <span class="number">0</span>, res_ex = <span class="number">0</span>;</span><br><span class="line">			<span class="type">__poll_t</span> mask;</span><br><span class="line"></span><br><span class="line">			<span class="comment">//从表中取出第一个unsigned long的整数，如果这个值不为0，说明</span></span><br><span class="line">			<span class="comment">//里面有要监听的文件描述符，如果为0说明没有监听的文件描述符，</span></span><br><span class="line">			<span class="comment">//执行continue，判断下一个unsigned long是否有数据</span></span><br><span class="line">			in = *inp++; out = *outp++; ex = *<span class="built_in">exp</span>++;</span><br><span class="line">			all_bits = in | out | ex;</span><br><span class="line">			<span class="keyword">if</span> (all_bits == <span class="number">0</span>) &#123;</span><br><span class="line">				i += BITS_PER_LONG;</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="comment">//如果all_bits不为0 ，说明里面有bit为是1，找出bit位为1</span></span><br><span class="line">			<span class="comment">//的文件描述符</span></span><br><span class="line">			<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; BITS_PER_LONG; ++j, ++i, bit &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">				<span class="class"><span class="keyword">struct</span> <span class="title">fd</span> <span class="title">f</span>;</span></span><br><span class="line">				<span class="keyword">if</span> (i &gt;= n)</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				<span class="keyword">if</span> (!(bit &amp; all_bits))</span><br><span class="line">					<span class="keyword">continue</span>;</span><br><span class="line">				<span class="comment">//这里的i就是找到的文件描述，比如i=3或者i=4</span></span><br><span class="line">				<span class="comment">//i==fd--&gt;fd_array[fd]---&gt;file--&gt;f_op--&gt;poll</span></span><br><span class="line">				f = fdget(i);</span><br><span class="line">				<span class="keyword">if</span> (f.file) &#123;</span><br><span class="line">					<span class="comment">//调用驱动的poll函数</span></span><br><span class="line">					mask = file-&gt;f_op-&gt;poll(f.file, wait);</span><br><span class="line"></span><br><span class="line">					<span class="keyword">if</span> ((mask &amp; POLLIN_SET) &amp;&amp; (in &amp; bit)) &#123;</span><br><span class="line">						res_in |= bit;</span><br><span class="line">						retval++;</span><br><span class="line">						wait-&gt;_qproc = <span class="literal">NULL</span>;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">if</span> ((mask &amp; POLLOUT_SET) &amp;&amp; (out &amp; bit)) &#123;</span><br><span class="line">						res_out |= bit;</span><br><span class="line">						retval++;</span><br><span class="line">						wait-&gt;_qproc = <span class="literal">NULL</span>;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">if</span> ((mask &amp; POLLEX_SET) &amp;&amp; (ex &amp; bit)) &#123;</span><br><span class="line">						res_ex |= bit;</span><br><span class="line">						retval++;</span><br><span class="line">						wait-&gt;_qproc = <span class="literal">NULL</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;	</span><br><span class="line">		&#125;</span><br><span class="line">	</span><br><span class="line">		<span class="comment">//select退出的三个条件:1.数据准备好了，2.超时时间到了，3.收到了信号</span></span><br><span class="line">		<span class="keyword">if</span> (retval || timed_out || signal_pending(current))</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//进程休眠</span></span><br><span class="line">		<span class="keyword">if</span> (!poll_schedule_timeout(&amp;table, TASK_INTERRUPTIBLE,</span><br><span class="line">					   to, slack))</span><br><span class="line">			timed_out = <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	poll_freewait(&amp;table);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> retval;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>BOA 服务器移植</title>
    <url>/2023/01/15/BOA%20%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%A7%BB%E6%A4%8D/</url>
    <content><![CDATA[<p>本文包含 <code>BOA</code> 服务器的介绍、移植、配置、参数介绍、错误解决等。</p>
<span id="more"></span>

<p>以下内容仅为我的个人积累，详细内容请参考 <a href="http://www.boa.org/">BOA 官方文档</a>。</p>
<h1 id="BOA-服务器"><a href="#BOA-服务器" class="headerlink" title="BOA 服务器"></a>BOA 服务器</h1><p>BOA 是一个小型的 HTTP 服务器，它的特点是占用资源少，运行速度快，是嵌入式 Linux 系统的首选 HTTP 服务器。   </p>
<h1 id="BOA-服务器移植"><a href="#BOA-服务器移植" class="headerlink" title="BOA 服务器移植"></a>BOA 服务器移植</h1><ol>
<li><p>解压源码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar xvf boa-0.94.13.tar.tar</span><br><span class="line"><span class="built_in">cd</span> boa-0.94.13</span><br></pre></td></tr></table></figure></li>
<li><p>进入 src&#x2F; 目录，生成并修改 Makefile 文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> src/</span><br><span class="line">./configure      <span class="comment"># 生成 Makefile 文件</span></span><br><span class="line">vim Makefile</span><br></pre></td></tr></table></figure>
<p>修改如下：</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">CC = arm-linux-gnueabihf-gcc <span class="comment"># 修改编译器</span></span><br><span class="line">CPP = arm-linux-gnueabihf-gcc -E <span class="comment"># 修改预处理器</span></span><br></pre></td></tr></table></figure></li>
<li><p>make 编译<br>编译一个linux下的c系统，包含词法和语法分析模块，Linux上用bison和flex。yacc是一个文法分析器的生成器,bison即是yacc的GNU版本.Lex和YACC是用于构造词法分析机和语法解释器的工具，利用Lex和YACC你可以轻松的构造一个语法解释器。</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install bison flex <span class="comment"># 安装bison和flex</span></span><br><span class="line">make <span class="comment"># 编译</span></span><br></pre></td></tr></table></figure></li>
<li><p>给 boa 瘦身</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">arm-linux-gnueabihf-strip boa <span class="comment"># 去掉符号表</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="BOA-服务器配置"><a href="#BOA-服务器配置" class="headerlink" title="BOA 服务器配置"></a>BOA 服务器配置</h1><p>开发板的根目录文件 <code>rootfsmy</code></p>
<ol>
<li><p>创建目录</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /etc/boa <span class="comment"># 创建 boa 配置文件目录</span></span><br></pre></td></tr></table></figure></li>
<li><p>将 <code>boa</code> 源码目录下的 <code>boa.conf</code> 拷贝到 <code>/etc/boa/</code> 目录下</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> boa.conf /rootfsmy/etc/boa/ </span><br></pre></td></tr></table></figure></li>
<li><p>修改配置文件 boa.conf</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /rootfsmy/etc/boa/boa.conf</span><br></pre></td></tr></table></figure>
<p> 修改如下：</p>
 <figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. Group nogroup </span></span><br><span class="line">Group 0 <span class="comment"># Group 的修改</span></span><br><span class="line"><span class="comment"># 2. User nobody</span></span><br><span class="line">User 0 <span class="comment"># User 的修改</span></span><br><span class="line"><span class="comment"># 3. ScriptAlias /cgi-bin/ /usr/lib/cgi-bin/</span></span><br><span class="line">ScriptAlias /cgi-bin/ /www/cgi-bin/ <span class="comment"># ScriptAlias 的修改</span></span><br><span class="line"><span class="comment"># 4. DocumentRoot /var/www/</span></span><br><span class="line">DocumentRoot /www <span class="comment"># DocumentRoot 的修改</span></span><br><span class="line"><span class="comment"># 5. #ServerName www.example.com</span></span><br><span class="line">ServerName www.your.org.here <span class="comment"># ServerName 的修改</span></span><br><span class="line"><span class="comment"># 6. AccessLog /var/log/boa/access_log</span></span><br><span class="line"><span class="comment">#AccessLog /var/log/boa/access_log # AccessLog 的修改</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>一下配置和 <code>boa.conf</code> 有关，都是在 ARM 根文件系统中创建</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /www <span class="comment"># 创建网页根目录</span></span><br><span class="line"><span class="built_in">mkdir</span> /www/cgi-bin <span class="comment"># 创建 CGI 脚本所在目录  </span></span><br></pre></td></tr></table></figure>
<p>当不能用 <code>cgi</code> 时</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># #AddType application/x-httpd-cgi cgi</span></span><br><span class="line">AddType application/x-httpd-cgi cgi <span class="comment"># AddType 的修改</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="BOA-服务器测试"><a href="#BOA-服务器测试" class="headerlink" title="BOA 服务器测试"></a>BOA 服务器测试</h1><ol>
<li>将 <code>boa</code> 拷贝到开发板的 <code>/etc/boa</code> 目录下 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> src/boa /rootfsmy/etc/boa/</span><br></pre></td></tr></table></figure></li>
<li>将 <code>ubuntu</code> 下 <code>/etc/mime.types</code> 拷贝到开发板根文件系统的 <code>/etc</code> 下 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> /etc/mime.types /rootfsmy/etc/</span><br></pre></td></tr></table></figure></li>
<li>将主页index.html拷贝到www目录下</li>
<li>运行 boa <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./boa <span class="comment"># /etc/boa/boa</span></span><br></pre></td></tr></table></figure>
<img src="/../image/boaTest.png" alt="Alt text"></li>
</ol>
<h1 id="boa-配置文件参数解释"><a href="#boa-配置文件参数解释" class="headerlink" title="boa 配置文件参数解释"></a>boa 配置文件参数解释</h1><ol>
<li><code>boa</code> 的配置文件是 <code>/etc/boa/boa.conf</code>。</li>
<li><code>Port</code>：boa服务器监听的端口，默认的端口是80。如果端口小于1024，则必须是root用户启动服务器。</li>
<li><code>Listen</code>：绑定的ip地址。不使用这个参数时，将绑定所有的地址。</li>
<li><code>User</code>：连接到服务器的客户端的身份，可以是用户名或UID。</li>
<li><code>Group</code>：连接到服务器的客户端的组，可以是组名或GID。</li>
<li><code>ServerAdmin</code>：服务器出故障时要通知的邮箱地址。</li>
<li><code>ErrorLog</code>：指定错误日志文件。如果路径没有以“&#x2F;”开始，则相对于ServerRoot路径。没有配置时默认的文件是&#x2F;dev&#x2F;stderr。若不想记录日志，指定文件为&#x2F;dev&#x2F;null。</li>
<li><code>AccessLog</code>：设置存取日志文件，与ErrorLog类似。UseLocaltime：设置使用本地时间，使用UTC时注释这个参数。这个参数没有值。</li>
<li><code>VerboseCGILogs</code>：在错误日志文件中记录CGI启动和停止时间，若不记录，注释这个参数。这个参数没有值。</li>
<li><code>ServerName</code>：指定服务器的名称，当客户端使用gethostname + gethostbyname时返回给客户端。</li>
<li><code>VirtualHost</code>：虚拟主机开关。使用此参数，则会在DocumentRoot设定的目录添加一个ip地址作为新的DocumentRoot来 处理客户端的请求。如DocumentRoot设置为&#x2F;var&#x2F;www，<a href="http://localhost/">http://localhost/</a> 则转换成&#x2F;var&#x2F;www&#x2F;127.0.0.1&#x2F;，若注释此参数，则为&#x2F;var&#x2F;www&#x2F;。</li>
<li>   <code>DocumentRoot</code>：HTML文件的根目录（也就是网站的目录）。</li>
<li>   <code>UserDir</code>：指定用户目录。</li>
<li>   <code>DirectoryIndex</code>：指定预生成目录信息的文件，注释此变量将使用DirectoryMaker变量。这个变量也就是设置默认主页的文件名。</li>
<li>   <code>DirectoryMaker</code>：指定用于生成目录的程序，注释此变量将不允许列目录。</li>
<li>   <code>KeepAliveMax</code>：每个连接允许的请求数量。如果将此值设为” 0 “，将不限制请求的数目 </li>
<li>   <code>KeepAliveTimeOut</code>：在关闭持久连接前等待下一个请求的秒数。（秒）。</li>
<li>   <code>MimeTypes</code>：设置包含mimetypes信息的文件，一般是&#x2F;etc&#x2F;mime.types。</li>
<li>   <code>DefaultType</code>：默认的mimetype类型，一般是text&#x2F;html。</li>
<li>   <code>CGIPath</code>：相当于给CGI程序使用的$PATH变量。</li>
<li>   <code>Aliases</code>：指定路径的别名。</li>
<li>   <code>ScriptAlias</code>：指定脚本路径的虚拟路径。</li>
</ol>
<h1 id="BOA-服务器错误解决"><a href="#BOA-服务器错误解决" class="headerlink" title="BOA 服务器错误解决"></a>BOA 服务器错误解决</h1><h2 id="error-pasting-t-and-does-not-give-a-valid-preprocessing-token"><a href="#error-pasting-t-and-does-not-give-a-valid-preprocessing-token" class="headerlink" title="error: pasting &quot;t&quot; and &quot;-&gt;&quot; does not give a valid preprocessing token"></a><code>error: pasting &quot;t&quot; and &quot;-&gt;&quot; does not give a valid preprocessing token</code></h2><p>在 make 的时候出现这个错误，<br>修改 <code>src/compat.h</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// #define TIMEZONE_OFFSET(foo) foo##-&gt;tm_gmtoff</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TIMEZONE_OFFSET(foo) (foo)-&gt;tm_gmtoff</span></span><br></pre></td></tr></table></figure>
<p>然后 <code>make clean</code> 后重新 <code>make</code> 即可。</p>
<h2 id="log-c-73-unable-to-dup2-the-error-log-Bad-file-descriptor"><a href="#log-c-73-unable-to-dup2-the-error-log-Bad-file-descriptor" class="headerlink" title="log.c:73 - unable to dup2 the error log: Bad file descriptor"></a><code>log.c:73 - unable to dup2 the error log: Bad file descriptor</code></h2><p>在运行 boa 的时候出现这个错误，<br>修改 <code>src/log.c</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// if (dup2(error_log, STDERR_FILENO) == -1) &#123;</span></span><br><span class="line"><span class="comment">//      DIE(&quot;unable to dup2 the error log&quot;);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// 注释掉上面的代码</span></span><br><span class="line"><span class="comment">/*  if (dup2(error_log, STDERR_FILENO) == -1) &#123;</span></span><br><span class="line"><span class="comment">        DIE(&quot;unable to dup2 the error log&quot;);</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br></pre></td></tr></table></figure>
<h2 id="boa-c-211-getpwuid-No-such-file-or-directory"><a href="#boa-c-211-getpwuid-No-such-file-or-directory" class="headerlink" title="boa.c:211 - getpwuid: No such file or directory"></a><code>boa.c:211 - getpwuid: No such file or directory</code></h2><p>在运行 boa 的时候出现这个错误，<br>修改 <code>src/boa.c</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// if (passwdbuf == NULL) &#123;</span></span><br><span class="line"><span class="comment">//      DIE(”getpwuid”);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// if (initgroups(passwdbuf-&gt;pw_name, passwdbuf-&gt;pw_gid) == -1) &#123;</span></span><br><span class="line"><span class="comment">//      DIE(”initgroups”);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// 注释掉上面的代码</span></span><br><span class="line"><span class="comment">/* if (passwdbuf == NULL) &#123;</span></span><br><span class="line"><span class="comment">    DIE(”getpwuid”);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">if (initgroups(passwdbuf-&gt;pw_name, passwdbuf-&gt;pw_gid) == -1) &#123;</span></span><br><span class="line"><span class="comment">    DIE(”initgroups”);</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br></pre></td></tr></table></figure>

<h2 id="boa-c-228-icky-Linux-kernel-bug-No-such-file-or-directory"><a href="#boa-c-228-icky-Linux-kernel-bug-No-such-file-or-directory" class="headerlink" title="boa.c:228 - icky Linux kernel bug!: No such file or directory"></a><code>boa.c:228 - icky Linux kernel bug!: No such file or directory</code></h2><p>在运行 boa 的时候出现这个错误，<br>修改 <code>src/boa.c</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// if(setuid(0) != -1) &#123;</span></span><br><span class="line"><span class="comment">//     DIE(”icky Linux kernel bug!”);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// 注释掉上面的代码</span></span><br><span class="line"><span class="comment">/* if(setuid(0) != -1) &#123;</span></span><br><span class="line"><span class="comment">    DIE(”icky Linux kernel bug!”);</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>SQLite3 移植</title>
    <url>/2023/01/22/SQLite3%20%E7%A7%BB%E6%A4%8D/</url>
    <content><![CDATA[<p>本文包含 <code>SQLite3</code> 的介绍、移植过程、注意事项和使用方式。</p>
<span id="more"></span>

<h1 id="SQLite3"><a href="#SQLite3" class="headerlink" title="SQLite3"></a>SQLite3</h1><p>SQLite3 是一个开源的嵌入式关系数据库，我们可以将其嵌入到我们的应用程序中，从而实现对数据的管理。SQLite3 的源代码可以从 <a href="https://www.sqlite.org/index.html">SQLite3 官网</a> 下载。<br>以下内容仅为对我所做项目移植的记录，详细内容请参考 <a href="https://www.sqlite.org/docs.html">SQLite3 官方文档</a>。</p>
<h1 id="SQLite3-移植"><a href="#SQLite3-移植" class="headerlink" title="SQLite3 移植"></a>SQLite3 移植</h1><ol>
<li>获取源码 <a href="https://www.sqlite.org/index.html">https://www.sqlite.org/index.html</a></li>
<li>解压源码<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar xvf sqlite-autoconf-3340000.tar.gz</span><br><span class="line"><span class="built_in">cd</span> sqlite-autoconf-3340000</span><br></pre></td></tr></table></figure></li>
<li>配置生成 Makefile <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./configure  --host=arm-linux-gnueabihf  --prefix=<span class="variable">$&#123;PWD&#125;</span>/install</span><br></pre></td></tr></table></figure></li>
<li>make 编译 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure></li>
<li>make install 安装 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make install</span><br></pre></td></tr></table></figure></li>
<li>将 <code>install</code> 目录下文件和主目录下 <code>sqlite3</code> 下文件进行移植到开发板根文件系统 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> install/bin/sqlite3  /home/ming/rootfs/bin</span><br><span class="line"><span class="built_in">cp</span> lib/libsqlite3.so.0.8.6  /home/ming/rootfs/lib</span><br></pre></td></tr></table></figure></li>
<li>对 <code>libsqlite3.so.0.8.6</code> 创建符号链接 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/ming/rootfs/lib</span><br><span class="line"><span class="built_in">ln</span> -s libsqlite3.so.0.8.6 libsqlite3.so.0</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="SQLite3-注意"><a href="#SQLite3-注意" class="headerlink" title="SQLite3 注意"></a>SQLite3 注意</h1><ol>
<li>实际开发中移植工作尽量在 root 用户下进行</li>
<li>类库移植首先要拿到源码 和 所依赖的库或源码</li>
<li>确定类库运行的硬件平台 (X86架构 或 ARM架构)，可以确定编译器的类型</li>
<li>修改Makefile 编译器(匹配硬件平台)</li>
<li>明确类库的调用方法(如何包含头文件 和 链接类库)<br>在开发中 移植库的工作尽量在 root 用户下移植。因为操作资源是不单单是权限问题</li>
</ol>
<h1 id="SQLite3-类库使用"><a href="#SQLite3-类库使用" class="headerlink" title="SQLite3 类库使用"></a>SQLite3 类库使用</h1><p>参考手册对 <code>sqlite3</code> 源码进行了编译 <code>sqlite3</code> 要运行在 157a 平台上(ARM 架构)，所以我们需要修改 <code>Makefile</code> 对应的编译器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./configure --host arm-linux-gnueabi --prefix ./install</span><br><span class="line"><span class="comment"># --host:指定运行主机平台的  指定编译器编译源码   </span></span><br><span class="line"><span class="comment"># --prefix:指定编译好的类库二进制文件的安装路径</span></span><br></pre></td></tr></table></figure>
<h2 id="污染交叉编译器-（不推荐）"><a href="#污染交叉编译器-（不推荐）" class="headerlink" title="污染交叉编译器 （不推荐）"></a>污染交叉编译器 （不推荐）</h2><ol>
<li>将 <code>install/include</code> 目录下的所有 <code>.h</code> 文件拷贝到 <code>toolchain/gcc-7.5.0/arm-linux-gnueabihf/include</code> 下， <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> install/include</span><br><span class="line">sudo <span class="built_in">cp</span> *.h  toolchain/gcc-7.5.0/arm-linux-gnueabihf/include  -arf</span><br></pre></td></tr></table></figure>
此操作解决包含头文件的问题   </li>
<li>将 <code>install/lib/libsqlite3.*</code> 所有文件拷贝到 <code>toolchain/gcc-7.5.0/arm-linux-gnueabihf/lib</code> 下后，<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> install/lib</span><br><span class="line"><span class="built_in">cp</span> libsqlite3.* ~/toolchain/gcc-7.5.0/arm-linux-gnueabihf/lib -arf</span><br></pre></td></tr></table></figure>
此操作解决的是使用 <code>sqlite3</code> 时链接库的问题 <code>arm-linux-gnueabihf-gcc xxx.c -o xxx -lsqlite3</code> 之所以将头文件和编译生成的库文件拷贝到交叉编译器对应的路径下能够解决问题，是因为交叉编译器的预处理包含头文件的路径在交叉编译器中链接器链接的路径也在交叉编译器中</li>
</ol>
<h2 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h2><p>依据 <code>pkgconfig</code> 目录下的 <code>sqlite3.pc</code> 文件内容进行链接使用</p>
<ol>
<li>打开 <code>bash.bashrc</code> 文件 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/bash.bashrc</span><br></pre></td></tr></table></figure></li>
<li>添加环境变量 <code>PKG_CONFIG_PATH</code> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PKG_CONFIG_PATH=<span class="variable">$PKG_CONFIG_PATH</span>:/home/ming/sqlite-autoconf-3340000/install/lib/pkgconfig/</span><br></pre></td></tr></table></figure></li>
<li>使环境变量生效 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/bash.bashrc</span><br></pre></td></tr></table></figure></li>
<li>编译源码链接操作 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">arm-linux-gnueabihf-gcc server.c -o server `pkg-config --cflags --libs sqlite3`</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>子系统</title>
    <url>/2023/03/10/%E5%AD%90%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<p>本文包含 <code>GPIO</code> <code>IIC</code> <code>SPI</code> 子系统的解析，使用方法，驱动编写思路，代码实现和应用层使用方法，</p>
<span id="more"></span>


<h1 id="子系统"><a href="#子系统" class="headerlink" title="子系统"></a>子系统</h1><h2 id="GPIO"><a href="#GPIO" class="headerlink" title="GPIO"></a>GPIO</h2><h2 id="IIC"><a href="#IIC" class="headerlink" title="IIC"></a>IIC</h2><h2 id="SPI"><a href="#SPI" class="headerlink" title="SPI"></a>SPI</h2>]]></content>
  </entry>
  <entry>
    <title>系统移植</title>
    <url>/2023/01/10/%E7%B3%BB%E7%BB%9F%E7%A7%BB%E6%A4%8D/</url>
    <content><![CDATA[<p>本文包含 <code>bootloader</code> 、<code>kernel</code> 、<code>rootfs</code> 的解析编译移植，<code>rootfs</code> 的介绍、语法、编写，<code>kernel</code> 的裁剪。</p>
<span id="more"></span>

<h1 id="系统移植"><a href="#系统移植" class="headerlink" title="系统移植"></a>系统移植</h1><h1 id="bootloader"><a href="#bootloader" class="headerlink" title="bootloader"></a>bootloader</h1><h1 id="kernel"><a href="#kernel" class="headerlink" title="kernel"></a>kernel</h1><h1 id="rootfs"><a href="#rootfs" class="headerlink" title="rootfs"></a>rootfs</h1>]]></content>
  </entry>
  <entry>
    <title>总线协议</title>
    <url>/2023/01/14/%E6%80%BB%E7%BA%BF%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<p>本文包括 <code>UART</code> <code>IIC</code> <code>SCCB</code> <code>SPI</code> 总线协议的解析，使用方法，驱动编写思路。</p>
<span id="more"></span>

<h1 id="IIC"><a href="#IIC" class="headerlink" title="IIC"></a>IIC</h1><p>一种<strong>同步串行</strong>的<strong>半双工</strong>总线，使用一根数据线<strong>SDA</strong>和一根时钟线<strong>SCL</strong>来传输数据，具有结构简单，接口连接方便，成本低的特点，速率再100kbps-400kbps之间。</p>
<h2 id="连接方式"><a href="#连接方式" class="headerlink" title="连接方式"></a>连接方式</h2><p><img src="/../image/IIClink.png" alt="IIC link"></p>
<h2 id="通信方式"><a href="#通信方式" class="headerlink" title="通信方式"></a>通信方式</h2><h3 id="起始信号-和-终止信号"><a href="#起始信号-和-终止信号" class="headerlink" title="起始信号 和 终止信号"></a>起始信号 和 终止信号</h3><p>在时钟线为<strong>高电平</strong>时，数据线<strong>由高电平跳变到低</strong>电平，表示起始信号。<br>在时钟线为<strong>高电平</strong>时，数据线<strong>由低电平跳变到高</strong>电平，表示终止信号。<br><img src="/../image/IICstart.png" alt="IIC start"></p>
<h3 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h3><p>数据传输时，在时钟线为高电平时，要求数据线的数据保持稳定，只有在时钟线为低电平时，数据线的数据才能发生变化。一个时钟周期完成1bit数据的传输。<br>每一个字节必须保证是<strong>8</strong>位长度。数据传送时，先传送最<strong>高位</strong>（MSB），每一个被传送的字节后面都必须跟随一位<strong>应答位</strong>（即一帧共有9位）。<br><img src="/../image/IICdata.png" alt="IIC data"></p>
<h3 id="应答"><a href="#应答" class="headerlink" title="应答"></a>应答</h3><p>在时钟线为高电平时，数据线由高电平跳变到低电平，表示应答位。<br>在时钟线为高电平时，数据线由低电平跳变到高电平，表示非应答位。</p>
<h3 id="寻址"><a href="#寻址" class="headerlink" title="寻址"></a>寻址</h3><p>IIC总线支持7、8、10位寻址，主机在起始信号后必须传送一个从机的地址（7位），第<strong>8位</strong>是数据的传送方向位（R&#x2F;W），用“0”表示主机发送数据（W），“1”表示主机接收数据（R）。总线上的每个从机都将这7位地址码与自己的地址进行比较，如果相同，则认为自己被主机寻址，根据R&#x2F;W位将自己定为发送器或接收器。<br><img src="/../image/IIC7.png" alt="IIC 7"><br>8位寻址和7位相似，只不过厂商在提供地址时，将第八位读写位包含在了地址中，所以前7位才是真正的地址。<br><img src="/../image/IIC8.png" alt="IIC 8"><br>10位寻址略有不同，10位地址需要分两帧发送，其中第一帧的前5位是固定的<code>11110</code>,后跟地址的高两位，最后一位为读写位，第二帧为地址的低8位。<br><img src="/../image/IIC10.png" alt="IIC 10"></p>
<h2 id="数据读写"><a href="#数据读写" class="headerlink" title="数据读写"></a>数据读写</h2><p><strong>写操作</strong>：主机发送起始信号，发送从机地址和写信号，从机应答，主机发送数据，从机应答，主机发送终止信号。<br><code>start + (7bit从机地址+1bit写0) + ack + (8bit/16bit寄存器地址) + ack + (8bit/16bit数据) + ack + stop</code><br><img src="/../image/IICwrite.png" alt="IIC write"><br><strong>读操作</strong>：主机发送起始信号，发送从机地址和写信号，从机应答，主机再次发送起始信号，发送从机地址和读信号，应答，主机接受数据，不给应答，主机发送终止信号。<br><img src="/../image/IICread.png" alt="IIC read"></p>
<h2 id="速率"><a href="#速率" class="headerlink" title="速率"></a>速率</h2><p>100KHz 高速、400KHz全速、3.4MHz高速</p>
<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul>
<li>串行通信，只需要两根线，数据线和时钟线</li>
<li>半双工通信，数据只能单向传输</li>
<li>串行数据传输，具备应答机制。</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>视频流移植</title>
    <url>/2023/01/25/%E8%A7%86%E9%A2%91%E6%B5%81%E7%A7%BB%E6%A4%8D/</url>
    <content><![CDATA[<p>本文包含确前置准备确认、内核驱动移植、<code>mjpeg-streamer</code> 移植、移植中遇到的错误和可能遇到的错误、以及解决方案、配置网页显示等内容。</p>
<span id="more"></span>



]]></content>
  </entry>
</search>
