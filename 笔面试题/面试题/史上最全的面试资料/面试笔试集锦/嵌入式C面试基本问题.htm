<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=GBK">
<title>（经典）C语言测试：想成为嵌入式程序员应知道的0x10个基本问题--BlogWT</title>
<META HTTP-EQUIV="Pragma" CONTENT="no-cache"> 
<META HTTP-EQUIV="Cache-Control" CONTENT="no-cache"> 
<META HTTP-EQUIV="Expires" CONTENT="0"> 
<META CONTENT="自己钞票并不少 无奈北京富人太多（经典）C语言测试：想成为嵌入式程序员应知道的0x10个基本问题  博客 博客中国 博客动力 blog blogdriver blogger 中国" NAME="description"> 
<META NAME="keywords" CONTENT="BlogWT 自己钞票并不少 无奈北京富人太多（经典）C语言测试：想成为嵌入式程序员应知道的0x10个基本问题 博客 博客中国 博客动力 blog blogdriver blogger 中国"> 
<link href="diary.css" rel="stylesheet" type="text/css">
<script language="JavaScript" src="/jsp/js/UBB.js"></script>
<script type="text/javascript" src="/jsp/js/blog.js"></script>	
</head>
<body>
  <div id="container">
    <div id="header"><h1 class="title"><a href="index.html">BlogWT</a></h1></div>
	<div id="category">	<a href="291708.html" title="上一篇">自己钞票并不少 无奈北京富人太多</a>- -|
		<a href="index.html">回首页</a> | <a href="catalog_2004.html">2004年索引</a>
	| - -<a href="-1.html" title="下一篇"></a></div>
 <div class="entity">
			    <h2 class="diaryTitle">（经典）C语言测试：想成为嵌入式程序员应知道的0x10个基本问题- -</h2>				 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
				 
				 <p>C语言测试：想C语言测试：想成为嵌入式程序员应知道的0x10个基本问题<br /><br /><br>C语言测试是招聘嵌入式系统程序员过程中必须而且有效的方法。这些年，我既参加也组织了许多这种测试，在这过程中我意识到这些测试能为带面试者和被面试者提供许多有用信息，此外，撇开面试的压力不谈，这种测试也是相当有趣的。<br />从被面试者的角度来讲，你能了解许多关于出题者或监考者的情况。这个测试只是出题者为显示其对ANSI标准细节的知识而不是技术技巧而设计吗？这个愚蠢的问题吗？如要你答出某个字符的ASCII值。这些问题着重考察你的系统调用和内存分配策略方面的能力吗？这标志着出题者也许花时间在微机上而不上在嵌入式系统上。如果上述任何问题的答案是&quot;是&quot;的话，那么我知道我得认真考虑我是否应该去做这份工作。<br />从面试者的角度来讲，一个测试也许能从多方面揭示应试者的素质：最基本的，你能了解应试者C语言的水平。不管怎么样，看一下这人如何回答他不会的问题也是满有趣。应试者是以好的直觉做出明智的选择，还是只是瞎蒙呢？当应试者在某个问题上卡住时是找借口呢，还是表现出对问题的真正的好奇心，把这看成学习的机会呢？我发现这些信息与他们的测试成绩一样有用。<br />有了这些想法，我决定出一些真正针对嵌入式系统的考题，希望这些令人头痛的考题能给正在找工作的人一点帮住。这些问题都是我这些年实际碰到的。其中有些题很难，但它们应该都能给你一点启迪。<br />这个测试适于不同水平的应试者，大多数初级水平的应试者的成绩会很差，经验丰富的程序员应该有很好的成绩。为了让你能自己决定某些问题的偏好，每个问题没有分配分数，如果选择这些考题为你所用，请自行按你的意思分配分数。<br />预处理器（Preprocessor）<br /><br />1 . 用预处理指令#define 声明一个常数，用以表明1年中有多少秒（忽略闰年问题）<br /><br /><br />#define SECONDS_PER_YEAR (60 * 60 * 24 * 365)UL<br />我在这想看到几件事情：<br />&amp;#8226;; #define 语法的基本知识（例如：不能以分号结束，括号的使用，等等）<br /><br /><br />&amp;#8226;; 懂得预处理器将为你计算常数表达式的值，因此，直接写出你是如何计算一年中有多少秒而不是计算出实际的值，是更清晰而没有代价的。<br />&amp;#8226;; 意识到这个表达式将使一个16位机的整型数溢出-因此要用到长整型符号L,告诉编译器这个常数是的长整型数。<br />&amp;#8226;; 如果你在你的表达式中用到UL（表示无符号长整型），那么你有了一个好的起点。记住，第一印象很重要。<br />2 . 写一个&quot;标准&quot;宏MIN ，这个宏输入两个参数并返回较小的一个。<br /><br /><br />#define MIN(A,B) （（A） &lt;= (B) ? (A) : (B)) <br /><br />这个测试是为下面的目的而设的：<br />&amp;#8226;; 标识#define在宏中应用的基本知识。这是很重要的，因为直到嵌入(inline)操作符变为标准C的一部分，宏是方便产生嵌入代码的唯一方法，对于嵌入式系统来说，为了能达到要求的性能，嵌入代码经常是必须的方法。<br />&amp;#8226;; 三重条件操作符的知识。这个操作符存在C语言中的原因是它使得编译器能产生比if-then-else更优化的代码，了解这个用法是很重要的。<br />&amp;#8226;; 懂得在宏中小心地把参数用括号括起来<br />&amp;#8226;; 我也用这个问题开始讨论宏的副作用，例如：当你写下面的代码时会发生什么事？<br /><br />least = MIN(*p++, b);<br /><br /><br />3. 预处理器标识#error的目的是什么？<br />如果你不知道答案，请看参考文献1。这问题对区分一个正常的伙计和一个书呆子是很有用的。只有书呆子才会读C语言课本的附录去找出象这种问题的答案。当然如果你不是在找一个书呆子，那么应试者最好希望自己不要知道答案。<br />死循环（Infinite loops）<br /><br /><br />4. 嵌入式系统中经常要用到无限循环，你怎么样用C编写死循环呢？<br />这个问题用几个解决方案。我首选的方案是：<br /><br />while(1)<br />{<br />?}<br /><br /><br /><br />一些程序员更喜欢如下方案：<br /><br />for(;;)<br />{<br />?}<br /><br /><br /><br />这个实现方式让我为难，因为这个语法没有确切表达到底怎么回事。如果一个应试者给出这个作为方案，我将用这个作为一个机会去探究他们这样做的基本原理。如果他们的基本答案是：&quot;我被教着这样做，但从没有想到过为什么。&quot;这会给我留下一个坏印象。<br />第三个方案是用 goto<br /><br />Loop:<br />...<br />goto Loop;<br /><br /><br />应试者如给出上面的方案，这说明或者他是一个汇编语言程序员（这也许是好事）或者他是一个想进入新领域的BASIC/FORTRAN程序员。<br /><br />数据声明（Data declarations） <br /><br />5. 用变量a给出下面的定义<br />a) 一个整型数（An integer） <br />b)一个指向整型数的指针（ A pointer to an integer） <br />c)一个指向指针的的指针，它指向的指针是指向一个整型数（ A pointer to a pointer to an intege）r <br />d)一个有10个整型数的数组（ An array of 10 integers） <br />e) 一个有10个指针的数组，该指针是指向一个整型数的。（An array of 10 pointers to integers） <br />f) 一个指向有10个整型数数组的指针（ A pointer to an array of 10 integers） <br />g) 一个指向函数的指针，该函数有一个整型参数并返回一个整型数（A pointer to a function that takes an integer as an argument and returns an integer） <br />h)一个有10个指针的数组，该指针指向一个函数，该函数有一个整型参数并返回一个整型数（ An array of ten pointers to functions that take an integer argument and return an integer ）<br /><br />答案是： <br />a) int a; // An integer <br />b) int *a; // A pointer to an integer <br />c) int **a; // A pointer to a pointer to an integer <br />d) int a[10]; // An array of 10 integers <br />e) int *a[10]; // An array of 10 pointers to integers <br />f) int (*a)[10]; // A pointer to an array of 10 integers <br />g) int (*a)(int); // A pointer to a function a that takes an integer argument and returns an integer <br />h) int (*a[10])(int); // An array of 10 pointers to functions that take an integer argument and return an integer <br />人们经常声称这里有几个问题是那种要翻一下书才能回答的问题，我同意这种说法。当我写这篇文章时，为了确定语法的正确性，我的确查了一下书。但是当我被面试的时候，我期望被问到这个问题（或者相近的问题）。因为在被面试的这段时间里，我确定我知道这个问题的答案。应试者如果不知道所有的答案（或至少大部分答案），那么也就没有为这次面试做准备，如果该面试者没有为这次面试做准备，那么他又能为什么出准备呢？<br />Static <br />6. 关键字static的作用是什么？<br />这个简单的问题很少有人能回答完全。在C语言中，关键字static有三个明显的作用：<br />&amp;#8226;; 在函数体，一个被声明为静态的变量在这一函数被调用过程中维持其值不变。<br />&amp;#8226;; 在模块内（但在函数体外），一个被声明为静态的变量可以被模块内所用函数访问，但不能被模块外其它函数访问。它是一个本地的全局变量。<br />&amp;#8226;; 在模块内，一个被声明为静态的函数只可被这一模块内的其它函数调用。那就是，这个函数被限制在声明它的模块的本地范围内使用。<br />大多数应试者能正确回答第一部分，一部分能正确回答第二部分，同是很少的人能懂得第三部分。这是一个应试者的严重的缺点，因为他显然不懂得本地化数据和代码范围的好处和重要性。<br /><br /><br />Const <br /><br />7．关键字const有什么含意？<br />我只要一听到被面试者说：&quot;const意味着常数&quot;，我就知道我正在和一个业余者打交道。去年Dan Saks已经在他的文章里完全概括了const的所有用法，因此ESP(译者：Embedded Systems Programming)的每一位读者应该非常熟悉const能做什么和不能做什么.如果你从没有读到那篇文章，只要能说出const意味着&quot;只读&quot;就可以了。尽管这个答案不是完全的答案，但我接受它作为一个正确的答案。（如果你想知道更详细的答案，仔细读一下Saks的文章吧。）<br />如果应试者能正确回答这个问题，我将问他一个附加的问题：<br />下面的声明都是什么意思？<br /><br />const int a;<br />int const a;<br />const int *a;<br />int * const a;<br />int const * a const;<br /><br />/******/<br />前两个的作用是一样，a是一个常整型数。第三个意味着a是一个指向常整型数的指针（也就是，整型数是不可修改的，但指针可以）。第四个意思a是一个指向整型数的常指针（也就是说，指针指向的整型数是可以修改的，但指针是不可修改的）。最后一个意味着a是一个指向常整型数的常指针（也就是说，指针指向的整型数是不可修改的，同时指针也是不可修改的）。如果应试者能正确回答这些问题，那么他就给我留下了一个好印象。顺带提一句，也许你可能会问，即使不用关键字const，也还是能很容易写出功能正确的程序，那么我为什么还要如此看重关键字const呢？我也如下的几下理由：<br />&amp;#8226;; 关键字const的作用是为给读你代码的人传达非常有用的信息，实际上，声明一个参数为常量是为了告诉了用户这个参数的应用目的。如果你曾花很多时间清理其它人留下的垃圾，你就会很快学会感谢这点多余的信息。（当然，懂得用const的程序员很少会留下的垃圾让别人来清理的。）<br />&amp;#8226;; 通过给优化器一些附加的信息，使用关键字const也许能产生更紧凑的代码。<br />&amp;#8226;; 合理地使用关键字const可以使编译器很自然地保护那些不希望被改变的参数，防止其被无意的代码修改。简而言之，这样可以减少bug的出现。<br />Volatile <br /><br />8. 关键字volatile有什么含意?并给出三个不同的例子。<br />一个定义为volatile的变量是说这变量可能会被意想不到地改变，这样，编译器就不会去假设这个变量的值了。精确地说就是，优化器在用到这个变量时必须每次都小心地重新读取这个变量的值，而不是使用保存在寄存器里的备份。下面是volatile变量的几个例子：<br />&amp;#8226;; 并行设备的硬件寄存器（如：状态寄存器）<br />&amp;#8226;; 一个中断服务子程序中会访问到的非自动变量(Non-automatic variables)<br />&amp;#8226;; 多线程应用中被几个任务共享的变量<br /><br />回答不出这个问题的人是不会被雇佣的。我认为这是区分C程序员和嵌入式系统程序员的最基本的问题。搞嵌入式的家伙们经常同硬件、中断、RTOS等等打交道，所有这些都要求用到volatile变量。不懂得volatile的内容将会带来灾难。<br />假设被面试者正确地回答了这是问题（嗯，怀疑是否会是这样），我将稍微深究一下，看一下这家伙是不是直正懂得volatile完全的重要性。<br />&amp;#8226;; 一个参数既可以是const还可以是volatile吗？解释为什么。<br />&amp;#8226;; 一个指针可以是volatile 吗？解释为什么。<br />&amp;#8226;; 下面的函数有什么错误：<br />int square(volatile int *ptr)<br />{<br />return *ptr * *ptr;<br />}<br /><br />下面是答案：<br />&amp;#8226;; 是的。一个例子是只读的状态寄存器。它是volatile因为它可能被意想不到地改变。它是const因为程序不应该试图去修改它。<br />&amp;#8226;; 是的。尽管这并不很常见。一个例子是当一个中服务子程序修该一个指向一个buffer的指针时。<br />&amp;#8226;; 这段代码有点变态。这段代码的目的是用来返指针*ptr指向值的平方，但是，由于*ptr指向一个volatile型参数，编译器将产生类似下面的代码：<br /><br /><br />int square(volatile int *ptr) <br />{<br />int a,b;<br />a = *ptr;<br />b = *ptr;<br />return a * b;<br />}<br /><br /><br />由于*ptr的值可能被意想不到地该变，因此a和b可能是不同的。结果，这段代码可能返不是你所期望的平方值！正确的代码如下：<br /><br />long square(volatile int *ptr) <br />{<br />int a;<br />a = *ptr;<br />return a * a;<br />}<br /><br />位操作（Bit manipulation） <br /><br />9. 嵌入式系统总是要用户对变量或寄存器进行位操作。给定一个整型变量a，写两段代码，第一个设置a的bit 3，第二个清除a 的bit 3。在以上两个操作中，要保持其它位不变。<br />对这个问题有三种基本的反应<br />&amp;#8226;; 不知道如何下手。该被面者从没做过任何嵌入式系统的工作。<br />&amp;#8226;; 用bit fields。Bit fields是被扔到C语言死角的东西，它保证你的代码在不同编译器之间是不可移植的，同时也保证了的你的代码是不可重用的。我最近不幸看到Infineon为其较复杂的通信芯片写的驱动程序，它用到了bit fields因此完全对我无用，因为我的编译器用其它的方式来实现bit fields的。从道德讲：永远不要让一个非嵌入式的家伙粘实际硬件的边。<br />&amp;#8226;; 用 #defines 和 bit masks 操作。这是一个有极高可移植性的方法，是应该被用到的方法。最佳的解决方案如下：<br /><br /><br />#define BIT3 (0x1 &lt;&lt; 3)<br />static int a;<br /><br />void set_bit3(void) {<br />a |= BIT3;<br />}<br />void clear_bit3(void) {<br />a &amp;= ~BIT3;<br />}<br /><br />一些人喜欢为设置和清除值而定义一个掩码同时定义一些说明常数，这也是可以接受的。我希望看到几个要点：说明常数、|=和&amp;=~操作。<br />访问固定的内存位置（Accessing fixed memory locations） <br /><br />10. 嵌入式系统经常具有要求程序员去访问某特定的内存位置的特点。在某工程中，要求设置一绝对地址为0x67a9的整型变量的值为0xaa66。编译器是一个纯粹的ANSI编译器。写代码去完成这一任务。<br />这一问题测试你是否知道为了访问一绝对地址把一个整型数强制转换（typecast）为一指针是合法的。这一问题的实现方式随着个人风格不同而不同。典型的类似代码如下：<br /><br />int *ptr;<br />ptr = (int *)0x67a9;<br />*ptr = 0xaa55;<br /><br />A more obscure approach is: <br />一个较晦涩的方法是：<br /><br />*(int * const)(0x67a9) = 0xaa55;<br /><br />即使你的品味更接近第二种方案，但我建议你在面试时使用第一种方案。<br /><br />中断（Interrupts） <br /><br />11. 中断是嵌入式系统中重要的组成部分，这导致了很多编译开发商提供一种扩展―让标准C支持中断。具代表事实是，产生了一个新的关键字__interrupt。下面的代码就使用了__interrupt关键字去定义了一个中断服务子程序(ISR)，请评论一下这段代码的。<br /><br />__interrupt double compute_area (double radius) <br />{<br />double area = PI * radius * radius;<br />printf(&quot;&#92;nArea = %f&quot;, area);<br />return area;<br />}<br /><br />这个函数有太多的错误了，以至让人不知从何说起了：<br />&amp;#8226;; ISR 不能返回一个值。如果你不懂这个，那么你不会被雇用的。<br />&amp;#8226;; ISR 不能传递参数。如果你没有看到这一点，你被雇用的机会等同第一项。<br />&amp;#8226;; 在许多的处理器/编译器中，浮点一般都是不可重入的。有些处理器/编译器需要让额处的寄存器入栈，有些处理器/编译器就是不允许在ISR中做浮点运算。此外，ISR应该是短而有效率的，在ISR中做浮点运算是不明智的。<br />&amp;#8226;; 与第三点一脉相承，printf()经常有重入和性能上的问题。如果你丢掉了第三和第四点，我不会太为难你的。不用说，如果你能得到后两点，那么你的被雇用前景越来越光明了。<br /><br />*****<br />代码例子（Code examples）<br /><br />12 . 下面的代码输出是什么，为什么？<br /><br />void foo(void)<br />{<br />unsigned int a = 6;<br />int b = -20;<br />(a+b &gt; 6) ? puts(&quot;&gt; 6&quot;) : puts(&quot;&lt;= 6&quot;);<br />}<br />这个问题测试你是否懂得C语言中的整数自动转换原则，我发现有些开发者懂得极少这些东西。不管如何，这无符号整型问题的答案是输出是 &quot;&gt;6&quot;。原因是当表达式中存在有符号类型和无符号类型时所有的操作数都自动转换为无符号类型。 因此-20变成了一个非常大的正整数，所以该表达式计算出的结果大于6。这一点对于应当频繁用到无符号数据类型的嵌入式系统来说是丰常重要的。如果你答错了这个问题，你也就到了得不到这份工作的边缘。<br />13. 评价下面的代码片断：<br /><br />unsigned int zero = 0;<br />unsigned int compzero = 0xFFFF; <br />/*1&#39;s complement of zero */<br /><br />对于一个int型不是16位的处理器为说，上面的代码是不正确的。应编写如下：<br /><br />unsigned int compzero = ~0;<br /><br />这一问题真正能揭露出应试者是否懂得处理器字长的重要性。在我的经验里，好的嵌入式程序员非常准确地明白硬件的细节和它的局限，然而PC机程序往往把硬件作为一个无法避免的烦恼。<br />到了这个阶段，应试者或者完全垂头丧气了或者信心满满志在必得。如果显然应试者不是很好，那么这个测试就在这里结束了。但如果显然应试者做得不错，那么我就扔出下面的追加问题，这些问题是比较难的，我想仅仅非常优秀的应试者能做得不错。提出这些问题，我希望更多看到应试者应付问题的方法，而不是答案。不管如何，你就当是这个娱乐吧...<br /><br />动态内存分配（Dynamic memory allocation） <br />14. 尽管不像非嵌入式计算机那么常见，嵌入式系统还是有从堆（heap）中动态分配内存的过程的。那么嵌入式系统中，动态分配内存可能发生的问题是什么？<br />这里，我期望应试者能提到内存碎片，碎片收集的问题，变量的持行时间等等。这个主题已经在ESP杂志中被广泛地讨论过了（主要是 P.J. Plauger, 他的解释远远超过我这里能提到的任何解释），所有回过头看一下这些杂志吧！让应试者进入一种虚假的安全感觉后，我拿出这么一个小节目：<br />下面的代码片段的输出是什么，为什么？<br /><br />char *ptr;<br />if ((ptr = (char *)malloc(0)) == <br />NULL) <br />else<br />puts(&quot;Got a null pointer&quot;);<br />puts(&quot;Got a valid pointer&quot;);<br /><br />这是一个有趣的问题。最近在我的一个同事不经意把0值传给了函数malloc，得到了一个合法的指针之后，我才想到这个问题。这就是上面的代码，该代码的输出是&quot;Got a valid pointer&quot;。我用这个来开始讨论这样的一问题，看看被面试者是否想到库例程这样做是正确。得到正确的答案固然重要，但解决问题的方法和你做决定的基本原理更重要些。<br />Typedef <br />: <br />15 Typedef 在C语言中频繁用以声明一个已经存在的数据类型的同义字。也可以用预处理器做类似的事。例如，思考一下下面的例子：<br /><br />#define dPS struct s *<br />typedef struct s * tPS;<br /><br />以上两种情况的意图都是要定义dPS 和 tPS 作为一个指向结构s指针。哪种方法更好呢？（如果有的话）为什么？<br />这是一个非常微妙的问题，任何人答对这个问题（正当的原因）是应当被恭喜的。答案是：typedef更好。思考下面的例子：<br /><br />dPS p1,p2;<br />tPS p3,p4;<br /><br />第一个扩展为<br /><br />struct s * p1, p2;<br /><br />.<br />上面的代码定义p1为一个指向结构的指，p2为一个实际的结构，这也许不是你想要的。第二个例子正确地定义了p3 和p4 两个指针。<br /><br />晦涩的语法<br /><br />16 . C语言同意一些令人震惊的结构,下面的结构是合法的吗，如果是它做些什么？<br /><br />int a = 5, b = 7, c;<br />c = a+++b;<br /><br />这个问题将做为这个测验的一个愉快的结尾。不管你相不相信，上面的例子是完全合乎语法的。问题是编译器如何处理它？水平不高的编译作者实际上会争论这个问题，根据最处理原则，编译器应当能处理尽可能所有合法的用法。因此，上面的代码被处理成：<br /><br />c = a++ + b;<br /><br />因此, 这段代码持行后a = 6, b = 7, c = 12。<br />如果你知道答案，或猜出正确答案，做得好。如果你不知道答案，我也不把这个当作问题。我发现这个问题的最大好处是这是一个关于代码编写风格，代码的可读性，代码的可修改性的好的话题。<br />好了，伙计们，你现在已经做完所有的测试了。这就是我出的C语言测试题，我怀着愉快的心情写完它，希望你以同样的心情读完它。如果是认为这是一个好的测试，那么尽量都用到你的找工作的过程中去吧。天知道也许过个一两年，我就不做现在的工作，也需要找一个。<br />Nigel Jones 是一个顾问，现在住在Maryland，当他不在水下时，你能在多个范围的嵌入项目中找到他。 他很高兴能收到读者的来信，他的email地址是: NAJones@compuserve.com 。<br />References <br />&amp;#8226;; Jones, Nigel, &quot;In Praise of the #error directive,&quot; Embedded Systems Programming, September 1999, p. 114. <br />&amp;#8226;; Jones, Nigel, &quot; Efficient C Code for Eight-bit MCUs ,&quot; Embedded Systems Programming, November 1998, p. 66. <br /><br /><br /></p>
             <p class="diaryFoot">- 作者： <a href="javascript:void(0);" onClick="window.open('http://publishblog.blogchina.com/blog/postMessage.b?receiver=70593','发送短消息','width=520, height=455')">wangtaonju</a> 访问统计：<script language="JavaScript" src="http://counter.blogchina.com/PageServlet?pageid=327753&blogid=67578"></script>　2004年12月4日, 星期六 17:48  
             <a href="javascript:void(keyit=window.open('http://blogmark.blogchina.com/jsp/key/quickaddkey.jsp?k='+encodeURI('（经典）C语言测试：想成为嵌入式程序员应知道的0x10个基本问题')+'&u='+encodeURI('http://wangtaonju.blogchina.com/wangtaonju/327753.html')+'&c='+encodeURI(''),'keyit','scrollbars=no,width=500,height=430,status=no,resizable=yes'));keyit.focus();">加入博采</a>
             </p>
				</div>
 <div class="operation"> 
    <a name="trackback"><H3>Trackback</H3></a>
      <p class="trackback">你可以使用这个链接引用该篇文章 http://publishblog.blogchina.com/blog/tb.b?diaryID=327753
 </p>
 </div>
 				
<div class="operation">
     <a name="comment"><H3>回复</H3></a>
     <a name="comment$(remark.remarkID)"><H4> - 评论人：zhaoshj </H4></a> 
    <H5>Tue Jul 12 20:50:31 CST 2005　 
        <a href="HTTP://" target="_blank"><img src="http://blog.blogchina.com/template/common/img/blog_2.gif" width="16" height="14" border="0" align="texttop"  class="imgStyle" alt="作者Blog"></a>
	</H5> 
    <BR/>
    <P class="comment">很长见识，非常感谢<br>
      <br>
    </P>
     <a name="comment$(remark.remarkID)"><H4> - 评论人：jiangwei </H4></a> 
    <H5>Wed Jun 29 10:50:55 CST 2005　 
        <a href="HTTP://" target="_blank"><img src="http://blog.blogchina.com/template/common/img/blog_2.gif" width="16" height="14" border="0" align="texttop"  class="imgStyle" alt="作者Blog"></a>
	</H5> 
    <BR/>
    <P class="comment">可以回答13/16题，可惜我不是做嵌入式的<br>
      <br>
    </P>
 </div>
  <div class="operation"> 
    <table width="700" border="0" cellpadding="0" cellspacing="0" class="comment">
      <form id="replyForm" method="POST">
        <input type="hidden" name="blogID" value="67578">
        <input type="hidden" name="diaryID" value="327753">
        <input type="hidden" name="blogDomino" value="wangtaonju">
<script>
if(getCookie('userID') == null){        
document.write('<tr><td width="70">发布人：</td>');
document.write('<td width="150"> <input name="remark.authorNameFUI" type="text" size="20" class="inputStyle" maxlength="20"></td>');
document.write('<td width="70">邮箱：</td>');
document.write('<td width="435"> <input name="remark.authorEmail" type="text" size="20" class="inputStyle" maxlength="40"></td>');
document.write('</tr><tr><td>主　页：</td>');
document.write('<td colspan="3"> <input name="remark.authorURL" type="text" class="inputStyle" value="HTTP://" size="63" maxlength="40"></td></tr>');
}else{
document.write('<input type="hidden" name="remark.authorNameFUI" value="Blogchina网友">');
}
</script>        
        <tr align="left"> 
          <td colspan="4">评论内容：<br/> <textarea name="remark.remarkFUI" id="remark" cols="60" rows="8" class="textStyle" >
          </textarea> 
          </td> 
        </tr>
        <tr align="left"> 
          <td colspan="4"> 　　　　　　 　　　　　　 
            <input type="button" value="提交" onClick="reply()" >
            　 
            <input type="reset" value="重置" > </td>
        </tr>
      </form>
    </table>
  </div>
</div>	
